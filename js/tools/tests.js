// Generated by CoffeeScript 1.8.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  requirejs.config({
    baseUrl: 'js',
    waitSeconds: 0,
    paths: {
      Model: 'model/model'
    }
  });

  require(['tools/jsonify', 'model/settings', 'Model'], function(JSONify, Settings, Model) {
    var JA, JB, TEST_EQ, TEST_NEQ, h1n, h1o, hn, ho, ja1, ja2, jb1, jb2, model, serialized, settings, sid1, sid2, _, _EQ, _NEQ, _TEST, _TEST_ONCE, _ref, _ref1;
    _EQ = function(a, b) {
      return a === b;
    };
    _NEQ = function(a, b) {
      return a !== b;
    };
    _TEST_ONCE = function(variable, values, info, func) {
      if (func(variable, values)) {
        return console.info("OK:" + info);
      } else {
        return console.error("FAIL: `" + variable + "` and `" + values + "`");
      }
    };
    _TEST = function(variables, values, func) {
      var i, v, _i, _len, _results;
      if (variables === void 0 || variables === null || variables === NaN) {
        console.error("Bad value: " + variables);
        return;
      }
      if (typeof variables === "object") {
        _results = [];
        for (i = _i = 0, _len = variables.length; _i < _len; i = ++_i) {
          v = variables[i];
          _results.push(_TEST_ONCE(v, values[i], v + ", " + values[i], func));
        }
        return _results;
      } else {
        return _TEST_ONCE(variables, values, variables + ", " + values, func);
      }
    };
    TEST_EQ = function(a, b) {
      return _TEST(a, b, _EQ);
    };
    TEST_NEQ = function(a, b) {
      return _TEST(a, b, _NEQ);
    };
    console.group("TEST test");
    TEST_EQ(1, 2);
    TEST_NEQ(1, 2);
    TEST_EQ(1, 1);
    TEST_NEQ([1, 1, 2, 3], [2, 3, 2, 3]);
    TEST_EQ(void 0, 1);
    TEST_EQ(null, 1);
    TEST_EQ(NaN, 1);
    console.groupEnd();
    JA = (function(_super) {
      __extends(JA, _super);

      function JA(_at_a) {
        this.a = _at_a;
        this.b = {
          a: 2,
          b: 4,
          c: void 0
        };
        this.className = "JA";
        this.JSONProperties = ["b"];
        this.register(JA);
      }

      JA.prototype.test = function() {
        return this.b.a;
      };

      return JA;

    })(JSONify.JSONify);
    JB = (function(_super) {
      __extends(JB, _super);

      function JB() {
        this.x = [1, 2, 3];
        this.y = new JA([1, 2, 3]);
        this.z = true;
        this.undef = void 0;
        this.a = {
          1: 'a',
          12: {
            b: {
              1: 22
            }
          }
        };
        this.className = "JB";
        this.JSONProperties = ["undef", "y", "a"];
        this.register(JB);
      }

      return JB;

    })(JSONify.JSONify);
    ja1 = new JA([1, 2, 3]);
    ja1.a = [2, 3, 1];
    ja1.b.c = 123334;
    serialized = ja1.serialize();
    ja2 = new JA([1, 2, 3]);
    ja2.deserialize(serialized);
    TEST_EQ(ja2.b.c, 123334);
    TEST_EQ(ja2.b.a, ja2.test());
    jb1 = new JB();
    jb1.y.b.c = -1234;
    jb1.a[12].b.c = -4321;
    serialized = jb1.serialize();
    jb2 = new JB();
    jb2.deserialize(serialized);
    TEST_EQ(jb2.y.a, [1, 2, 3]);
    TEST_EQ(jb2.y.b.c, -1234);
    TEST_EQ(jb2.a[12].b.c, -4321);
    TEST_EQ(jb2.y.test(), jb2.y.b.a);
    settings = new Settings.Settings();
    model = new Model(settings);
    console.group("Player Test");
    model.addPlayer("test1");
    model.addPlayer("test2");
    model.addPlayer("test3");
    TEST_EQ(model.players.length, 3);
    console.groupEnd();
    model.startGame();
    console.group("Hit & Treat");
    model.players[0].hit(model.players[1]);
    ho = model.players[1].health;
    model.players[1].treat(3);
    hn = model.players[1].health;
    TEST_NEQ(ho - hn, 0);
    model.players[2].miss();
    console.groupEnd();
    console.group("Statistic And events Test");
    TEST_NEQ(model.statistic.stats.all_treat, 0);
    TEST_NEQ(model.statistic.stats.all_damage, 0);
    TEST_EQ(model.statistic.stats.all_tasks, 5);
    TEST_EQ(model.statistic.stats.solve_percent, 4 / 5);
    console.groupEnd();
    console.group("Snapshot Test");
    model.players[0].hit(model.players[1]);
    h1o = model.players[1].getHealth();
    _ref = model.save(), _ = _ref[0], sid1 = _ref[1];
    model.players[0].hit(model.players[1]);
    h1n = model.players[1].getHealth();
    _ref1 = model.save(), _ = _ref1[0], sid2 = _ref1[1];
    model.load(sid1);
    TEST_EQ(model.players[1].getHealth(), h1o);
    model.load(sid2);
    TEST_EQ(model.players[1].getHealth(), h1n);
    return console.groupEnd();
  });

}).call(this);

//# sourceMappingURL=tests.js.map
