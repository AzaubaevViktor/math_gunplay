// Generated by CoffeeScript 1.8.0
(function() {
  var A, B, JA, JB, JSONify, TEST_EQ, TEST_NEQ, f, h1n, h1o, hn, ho, ja1, ja2, jb1, jb2, model, serialized, settings, sid1, sid2, _, _EQ, _NEQ, _TEST, _TEST_ONCE, _ref, _ref1,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  _EQ = function(a, b) {
    return a === b;
  };

  _NEQ = function(a, b) {
    return a !== b;
  };

  _TEST_ONCE = function(variable, values, info, func) {
    if (func(variable, values)) {
      return console.info("OK:" + info);
    } else {
      return console.error("FAIL: `" + variable + "` and `" + values + "`");
    }
  };

  _TEST = function(variables, values, func) {
    var i, v, _i, _len, _results;
    if (typeof variables === "object") {
      _results = [];
      for (i = _i = 0, _len = variables.length; _i < _len; i = ++_i) {
        v = variables[i];
        _results.push(_TEST_ONCE(v, values[i], i, func));
      }
      return _results;
    } else {
      return _TEST_ONCE(variables, values, variables, func);
    }
  };

  TEST_EQ = function(a, b) {
    return _TEST(a, b, _EQ);
  };

  TEST_NEQ = function(a, b) {
    return _TEST(a, b, _NEQ);
  };

  console.group("TEST test");

  TEST_EQ(1, 2);

  TEST_NEQ(1, 2);

  TEST_EQ(1, 1);

  TEST_NEQ([1, 1, 2, 3], [2, 3, 2, 3]);

  console.groupEnd();

  JSONify = Tools.JSONify;

  JA = (function(_super) {
    __extends(JA, _super);

    function JA() {
      this.a = [1, 2, 3];
      this.b = {
        a: 2,
        b: 4
      };
      this.className = "JA";
      this.JSONProperties = ["b"];
      this.register(JA);
    }

    JA.prototype.test = function() {
      return this.b.a;
    };

    return JA;

  })(JSONify);

  JB = (function(_super) {
    __extends(JB, _super);

    function JB() {
      this.x = [1, 2, 3];
      this.y = new JA();
      this.z = true;
      this.a = {
        1: 'a',
        12: {
          b: {
            1: 22
          }
        }
      };
      this.className = "JB";
      this.JSONProperties = ["y", "a"];
      this.register(JB);
    }

    return JB;

  })(JSONify);

  ja1 = new JA();

  ja1.a = [2, 3, 1];

  ja1.b.c = 123334;

  serialized = ja1.serialize();

  ja2 = new JA();

  ja2.deserialize(serialized);

  TEST_EQ(ja2.b.c, 123334);

  TEST_EQ(ja2.b.a, ja2.test());

  jb1 = new JB;

  jb1.y.b.c = -1234;

  jb1.a[12].b.c = -4321;

  serialized = jb1.serialize();

  jb2 = new JB();

  jb2.deserialize(serialized);

  console.log(serialized, jb2);

  TEST_EQ(jb2.y.b.c, -1234);

  TEST_EQ(jb2.a[12].b.c, -4321);

  TEST_EQ(jb2.y.test(), jb2.y.b.a);

  settings = new Model.Settings();

  model = new Model.Model(settings);

  window.model = model;

  A = {
    counter: 0
  };

  B = {
    counter: 0
  };

  A.a = 12;

  Tools.observer.observe(A, "a", function(a, b, c) {
    return A.counter += 1;
  });

  Tools.observer.observe(B, "a", function(a, b, c) {
    return B.counter += 1;
  });

  A.a = 13;

  B.a = 44;

  Tools.observer.unobserve(A, "a");

  Tools.observer.unobserve(A, "x");

  f = function() {
    return A.a = B.a = 333;
  };

  setTimeout(f, 100);

  f = function() {
    console.group("ObserveTest");
    TEST_EQ([A.counter, B.counter], [1, 2]);
    return console.groupEnd();
  };

  setTimeout(f, 200);

  console.group("Player Test");

  model.addPlayer("test1");

  model.addPlayer("test2");

  model.addPlayer("test3");

  TEST_EQ(model.players.length, 3);

  console.groupEnd();

  model.startGame();

  console.group("Hit & Treat");

  model.players[0].hit(model.players[1]);

  ho = model.players[1].health;

  model.players[1].treat(3);

  hn = model.players[1].health;

  TEST_NEQ(ho - hn, 0);

  console.groupEnd();

  f = function() {
    console.group("Statistic Test");
    TEST_NEQ(model.statistic.stats.all_treat.value, 0);
    return console.groupEnd();
  };

  setTimeout(f, 100);

  console.group("Snapshot Test");

  model.players[0].hit(model.players[1]);

  h1o = model.players[1].getHealth();

  _ref = model.save(), _ = _ref[0], sid1 = _ref[1];

  model.players[0].hit(model.players[1]);

  h1n = model.players[1].getHealth();

  _ref1 = model.save(), _ = _ref1[0], sid2 = _ref1[1];

  model.load(sid1);

  TEST_EQ(model.players[1].getHealth(), h1o);

  model.load(sid2);

  TEST_EQ(model.players[1].getHealth(), h1n);

  console.groupEnd();

}).call(this);

//# sourceMappingURL=tests.js.map
