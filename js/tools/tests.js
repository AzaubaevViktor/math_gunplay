// Generated by CoffeeScript 1.8.0
(function() {
  var A, B, TEST_EQ, TEST_NEQ, f, hn, ho, model, settings, _EQ, _NEQ, _TEST, _TEST_ONCE;

  _EQ = function(a, b) {
    return a === b;
  };

  _NEQ = function(a, b) {
    return a !== b;
  };

  _TEST_ONCE = function(variable, values, info, func) {
    if (func(variable, values)) {
      return console.info("OK:" + info);
    } else {
      return console.error("FAIL: `" + variable + "` and `" + values + "`");
    }
  };

  _TEST = function(variables, values, func) {
    var i, v, _i, _len, _results;
    if (typeof variables === "object") {
      _results = [];
      for (i = _i = 0, _len = variables.length; _i < _len; i = ++_i) {
        v = variables[i];
        _results.push(_TEST_ONCE(v, values[i], i, func));
      }
      return _results;
    } else {
      return _TEST_ONCE(variables, values, variables, func);
    }
  };

  TEST_EQ = function(a, b) {
    return _TEST(a, b, _EQ);
  };

  TEST_NEQ = function(a, b) {
    return _TEST(a, b, _NEQ);
  };

  console.group("TEST test");

  TEST_EQ(1, 2);

  TEST_NEQ(1, 2);

  TEST_EQ(1, 1);

  TEST_NEQ([1, 1, 2, 3], [2, 3, 2, 3]);

  console.groupEnd();

  settings = new Model.Settings();

  model = new Model.Model(settings);

  window.model = model;

  A = {
    counter: 0
  };

  B = {
    counter: 0
  };

  A.a = 12;

  Tools.observer.observe(A, "a", function(a, b, c) {
    return A.counter += 1;
  });

  Tools.observer.observe(B, "a", function(a, b, c) {
    return B.counter += 1;
  });

  A.a = 13;

  B.a = 44;

  Tools.observer.unobserve(A, "a");

  Tools.observer.unobserve(A, "x");

  f = function() {
    return A.a = B.a = 333;
  };

  setTimeout(f, 100);

  f = function() {
    console.group("ObserveTest");
    TEST_EQ([A.counter, B.counter], [1, 2]);
    return console.groupEnd();
  };

  setTimeout(f, 200);

  console.group("Player Test");

  model.addPlayer("test1");

  model.addPlayer("test2");

  model.addPlayer("test3");

  TEST_EQ(model.players.length, 3);

  console.groupEnd();

  model.startGame();

  console.group("Hit & Treat");

  model.players[0].hit(model.players[1]);

  ho = model.players[1].health;

  model.players[1].treat(3);

  hn = model.players[1].health;

  TEST_NEQ(ho - hn, 0);

  console.groupEnd();

  f = function() {
    console.group("Statistic Test");
    TEST_NEQ(model.statistic.stats.all_treat.value, 0);
    return console.groupEnd();
  };

  setTimeout(f, 100);

}).call(this);

//# sourceMappingURL=tests.js.map
