// Generated by CoffeeScript 1.10.0
(function() {
  var ViewSettingsModal, bindSettings, bindSettingsGenerate, colIF, colText, desc, row;

  desc = {
    info: {
      type: "text",
      label: "Помните: настройки обновляются <b>сразу</b>!"
    },
    wiki: {
      type: "text",
      label: "<a href='https://github.com/ktulhy-kun/math_gunplay/wiki'>Как играть</a>"
    },
    dayTime: {
      type: "number",
      label: "Продолжительность дня",
      after: "мин",
      help: "Если вы меняете это поле днём, то изменения вступят в силу только на <b>следующий</b> день"
    },
    maxAttack: {
      type: "number",
      label: "Максимальная атака",
      after: "%"
    },
    selfDestroyAttack: {
      type: "checkbox",
      after: "Самоубийство (Атака)"
    },
    selfDestroyTreat: {
      type: "checkbox",
      after: "Самоубийство (Лечение)"
    },
    selfDestroyResuscitation: {
      type: "checkbox",
      after: "Самоубийство (Реанимация)"
    },
    nullResus: {
      type: "checkbox",
      after: "Обнуление количества лечений при лечении в реанимации"
    },
    hospitalPlus: {
      type: "number",
      label: "Дополнительные очки при лечении в госпитале"
    },
    attackFormula: {
      type: "text",
      label: "Формула расчёта урона:<br>min (10 + Р - Н - 3 * Л, МАКСУРОН)",
      help: "Р -- кол-во решённых задач<br> Н -- кол-во нерешённых задач<br> Л -- кол-во попыток лечения<br> МАКСУРОН -- максимальный урон, см. выше"
    },
    treatFormula: {
      type: "text",
      label: "Формула расчёта лечения:<br>5 * У + Р - Н - 3 * Л - 5",
      help: "У -- кол-во решённых задач из 3-х, остальное см. выше"
    },
    github: {
      type: "text",
      label: "<a href='https://github.com/ktulhy-kun/math_gunplay'>Исходный код</a>"
    }
  };

  row = function() {
    return $("<div class='row'>");
  };

  colText = function() {
    return $("<div class='col s12'>");
  };

  colIF = function() {
    return $("<div class='col s12 input-field'>");
  };

  bindSettingsGenerate = function(name, type) {
    var elem;
    elem = $("#" + name + "-" + type);
    switch (type) {
      case 'number':
        return function() {
          mgModelSettings[name] = 1 * elem.val();
          return mgModelSettings.saveSettings();
        };
      case 'checkbox':
        return function() {
          mgModelSettings[name] = elem.prop('checked');
          return mgModelSettings.saveSettings();
        };
    }
  };

  bindSettings = function(name, type) {
    var elem;
    elem = $("#" + name + "-" + type);
    switch (type) {
      case "number":
        elem.on('change', bindSettingsGenerate(name, type));
        break;
      case "checkbox":
        elem.on('change', bindSettingsGenerate(name, type));
    }
  };

  ViewSettingsModal = (function() {
    function ViewSettingsModal() {
      var name, param;
      this.modal = $("#modalSettingsBody");
      this.modal.append(this.modalInit());
      for (name in desc) {
        param = desc[name];
        bindSettings(name, param.type);
      }
    }

    ViewSettingsModal.prototype.modalInit = function() {
      var checked, name, param, results;
      results = [];
      for (name in desc) {
        param = desc[name];
        switch (param.type) {
          case "text":
            results.push(row().append(colText().append([$("<p>").append(param.label), param.help != null ? $("<p style='color:gray'>").append(param.help) : void 0])));
            break;
          case "number":
            results.push(row().append(colIF().append(["<input value='" + mgModelSettings[name] + "' id='" + name + "-number' type='number' class='validate'> <label class='active' for='first_name2'>" + param.label + ", " + (param.after != null ? param.after : void 0) + "</label>", param.help != null ? $("<p style='color:gray'>").append(param.help) : void 0])));
            break;
          case "checkbox":
            checked = mgModelSettings[name];
            results.push(row().append($("<p>").append("<input type='checkbox' id='" + name + "-checkbox' " + (checked ? "checked" : void 0) + "/> <label for='" + name + "-checkbox'>" + param.after + "</label>")));
            break;
          default:
            results.push("");
        }
      }
      return results;
    };

    return ViewSettingsModal;

  })();

  $(document).ready(function() {
    var vsm;
    return vsm = new ViewSettingsModal();
  });

}).call(this);

//# sourceMappingURL=settings.js.map
