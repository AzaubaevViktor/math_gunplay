// Generated by CoffeeScript 1.10.0
(function() {
  var View, ViewPlayer, ViewSettings, checkShowHide, checkShowHideGameMode, viewSettings;

  ViewSettings = (function() {
    function ViewSettings() {
      this.fromPlId = -1;
      this.isAttack = false;
      this.attackTo = -1;
    }

    return ViewSettings;

  })();

  viewSettings = new ViewSettings();

  checkShowHide = function(element, condition) {
    if (condition) {
      return element.show(100);
    } else {
      return element.hide(100);
    }
  };

  checkShowHideGameMode = function(element, gameModeList) {
    return checkShowHide(element, isMode(gameModeList));
  };

  ViewPlayer = (function() {
    function ViewPlayer(player1) {
      this.player = player1;
      this.el = null;
    }

    ViewPlayer.prototype.getEl = function() {
      if (this.el != null) {
        return this.el;
      } else {
        return this.generatePlayer();
      }
    };

    ViewPlayer.prototype.hide = function(time) {
      return this.el.hide(time);
    };

    ViewPlayer.prototype.show = function(time) {
      return this.el.show(time);
    };

    ViewPlayer.prototype.generatePlayer = function() {
      return this.el = $("<tr>").addClass("player").attr("id", "player" + this.player.id).append([$("<td>").addClass("plId"), $("<td>").addClass("plName"), $("<td>").addClass("plHealth"), $("<td>").addClass("plDamage"), $("<td>").addClass("plTreat"), $("<td>").addClass("plSolvedUnsolved"), $("<td colspan='4'>").hide().addClass("plActions").append([btn("solve", "Решена", "green darken-1", this.generateActionClickCallback()), btn("unsolve", "Не решена", "red darken-1", this.generateActionClickCallback()), $("<select act='treat'>").addClass("waves-effect waves-light btn blue darken-1").append([$("<option value='0'>"), $("<option value='1'>"), $("<option value='2'>"), $("<option value='3'>")]).on('change', this.generateActionClickCallback()), btn("penalty", "Штраф", "orange darken-1", this.generateActionClickCallback())])]);
    };

    ViewPlayer.prototype.update = function() {
      var i, j, k, len, opt, penalties, ref, ref1;
      this.el.removeClass().addClass(this.player.getLevel()).addClass("player");
      penalties = "";
      for (i = j = 1, ref = this.player.penalties; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        penalties += "*";
      }
      this.el.find(".plId").text(this.player.id);
      this.el.find(".plName").text(this.player.name + penalties);
      this.el.find(".plHealth").text(this.player.health);
      this.el.find(".plDamage").text(this.player.getAttackValue());
      this.el.find(".plTreat").text(this.player.getTreatValue(3));
      ref1 = this.el.find("option");
      for (k = 0, len = ref1.length; k < len; k++) {
        opt = ref1[k];
        opt = $(opt);
        opt.text((opt.attr('value')) + " верно (" + (this.player.getTreatValue(opt.attr('value'))) + ")");
      }
      this.el.find(".plSolvedUnsolved").text(this.player.solved + "/" + this.player.unsolved);
      this.show(1000);
    };

    ViewPlayer.prototype.showActions = function(time) {
      this.el.find(".plHealth").hide();
      this.el.find(".plDamage").hide();
      this.el.find(".plTreat").hide();
      this.el.find(".plSolvedUnsolved").hide();
      return this.el.find(".plActions").show(time);
    };

    ViewPlayer.prototype.hideActions = function(time) {
      this.el.find(".plActions").hide();
      this.el.find(".plHealth").show(time);
      this.el.find(".plDamage").show(time);
      this.el.find(".plTreat").show(time);
      return this.el.find(".plSolvedUnsolved").show(time);
    };

    ViewPlayer.prototype.generateActionClickCallback = function() {
      return (function(_this) {
        return function(e) {
          var actName, target, value;
          target = $(e.currentTarget);
          actName = target.attr('act');
          value = target.val();
          return mgView.actionClick(actName, value);
        };
      })(this);
    };

    return ViewPlayer;

  })();

  View = (function() {
    function View() {
      this.table = $("#mainTable");
      this.tbody = this.table.find("tbody");
      this.addPlayerButton = $('#addPlayerButton');
      this.modeButtonText = $("#modeText");
      this.viewPlayers = [];
      mgModelSettings.daySecondCallback = (function(_this) {
        return function() {
          return _this.updateTime();
        };
      })(this);
    }

    View.prototype.updatePlayer = function(player) {
      var vPlayer;
      vPlayer = null;
      if (this.viewPlayers.length < player.id + 1) {
        vPlayer = new ViewPlayer(player);
        this.viewPlayers.push(vPlayer);
        this.tbody.append(vPlayer.getEl());
        vPlayer.hide();
      } else {
        vPlayer = this.viewPlayers[player.id];
      }
      return vPlayer.update();
    };

    View.prototype.updatePlayers = function() {
      var j, len, player, ref;
      ref = mgModel.players;
      for (j = 0, len = ref.length; j < len; j++) {
        player = ref[j];
        this.updatePlayer(player);
      }
    };

    View.prototype.updateTime = function() {
      var min, sec, time;
      time = mgModelSettings.time;
      min = Math.floor(time / 60);
      min = min < 10 ? "0" + min : min;
      sec = time % 60;
      sec = sec < 10 ? "0" + sec : sec;
      return this.modeButtonText.text("День (" + min + ":" + sec + ")");
    };

    View.prototype.updatePanel = function() {
      if (isMode(MODE_ADD)) {
        this.modeButtonText.text("Добавление игроков");
      } else if (isMode(MODE_DAY)) {
        this.updateTime();
      } else if (isMode(MODE_NIGHT)) {
        this.modeButtonText.text("Ночь");
      }
      return checkShowHideGameMode(this.addPlayerButton, MODE_ADD);
    };

    View.prototype.update = function() {
      this.updatePlayers();
      return this.updatePanel();
    };

    View.prototype.hideAllActions = function() {
      var j, len, ref, results, vPl;
      ref = this.viewPlayers;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        vPl = ref[j];
        results.push(vPl.hideActions(0));
      }
      return results;
    };

    View.prototype.playerClick = function(playerEl) {
      var id, vPlayer;
      id = 1 * playerEl.attr('id').slice(6);
      console.log(id);
      vPlayer = this.viewPlayers[id];
      if (viewSettings.fromPlId === -1) {
        vPlayer.showActions(300);
        viewSettings.fromPlId = id;
      } else if (viewSettings.fromPlId === id) {
        vPlayer.hideActions(300);
        viewSettings.fromPlId = -1;
      } else {
        this.hideAllActions();
        vPlayer.showActions(300);
        viewSettings.fromPlId = id;
      }
    };

    View.prototype.actionClick = function(act, value) {
      console.log(act, value);
      viewSettings.isAttack = false;
      if (viewSettings.isAttack) {
        return;
      }
      switch (act) {
        case 'solve':
          viewSettings.isAttack = true;
          break;
        case 'unsolve':
          mgModel.miss(viewSettings.fromPlId);
          this.hideAllActions();
          viewSettings.fromPlId = -1;
          break;
        case 'treat':
          mgModel.treat(viewSettings.fromPlId, value);
          this.hideAllActions();
          viewSettings.fromPlId = -1;
          break;
        case 'penalty':
          mgModel.penalty(viewSettings.fromPlId);
          this.hideAllActions();
          viewSettings.fromPlId = -1;
      }
      return this.update();
    };

    return View;

  })();

  window.mgView = new View();

  mgView.update();

}).call(this);

//# sourceMappingURL=view.js.map
