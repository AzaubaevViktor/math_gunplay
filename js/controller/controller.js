// Generated by CoffeeScript 1.10.0
(function() {
  var Controller;

  Controller = (function() {
    function Controller() {
      console.info("Create Controller");
      $("#modalAddPlayerAgreeBtn").on("click", (function(_this) {
        return function() {
          return _this.addPlayer();
        };
      })(this));
      $("#newPlayerName").keyup((function(_this) {
        return function(e) {
          if (13 === e.keyCode) {
            return _this.addPlayer();
          }
        };
      })(this));
      $("#modeButton").on("click", (function(_this) {
        return function() {
          return _this.changeGameMode();
        };
      })(this));
      mgModelSettings.endDayCallback = (function(_this) {
        return function() {
          return _this.changeGameMode();
        };
      })(this);
      $("#prevSnap").on('click', (function(_this) {
        return function() {
          snapshotter.prevSnapshot();
          mgView.update();
          return _this.bindPlayersClick();
        };
      })(this));
      $("#nextSnap").on('click', (function(_this) {
        return function() {
          snapshotter.nextSnapshot();
          mgView.update();
          return _this.bindPlayersClick();
        };
      })(this));
      $("#newGame").on('click', (function(_this) {
        return function() {
          return Materialize.toast("Для того, чтобы начать НОВУЮ ИГРУ (ТЕКУЩАЯ ИГРА УДАЛИТСЯ, ЕСЛИ ОНА НЕ СОХРАНЕНА), нажми <a href=# onclick='mgController.newGame()'>сюда</a>", 3000);
        };
      })(this));
      this.bindPlayersClick();
      return;
    }

    Controller.prototype.addPlayer = function() {
      var name;
      name = $("#newPlayerName").val();
      $("#newPlayerName").val("");
      this.addNamedPlayer(name);
    };

    Controller.prototype.bindPlayersClick = function() {
      $("tr.player").unbind('click');
      $("tr.player").on('click', (function(_this) {
        return function(e) {
          if (!$(e.toElement).attr('class').includes('btn')) {
            return _this.playerClick($(e.currentTarget));
          }
        };
      })(this));
    };

    Controller.prototype.addNamedPlayer = function(name) {
      if (name.length) {
        mgModel.addPlayer(name);
        mgView.update();
      }
      this.bindPlayersClick();
    };

    Controller.prototype.changeGameMode = function() {
      if (isMode(MODE_ADD)) {
        if (mgModel.players.length === 0) {
          Materialize.toast("Вы не добавили ни одного игрока. Нажмите на + на верхней панели, чтобы добавить игроков", 4000, "red darken-4");
        } else {
          setMode(MODE_DAY);
        }
      } else if (isMode(MODE_DAY)) {
        setMode(MODE_NIGHT);
      } else if (isMode(MODE_NIGHT)) {
        setMode(MODE_DAY);
        mgViewSettings.fromPlId = -1;
        mgViewSettings.isAttack = false;
        mgViewSettings.currentLevel = null;
      }
      mgView.update();
    };

    Controller.prototype.playerClick = function(playerEl) {
      var id;
      if (!isMode(MODE_NIGHT)) {
        return;
      }
      id = 1 * playerEl.attr('id').slice(6);
      if (mgViewSettings.isAttack) {
        mgModel.hit(mgViewSettings.fromPlId, id);
        mgViewSettings.fromPlId = -1;
        mgViewSettings.isAttack = false;
        mgViewSettings.currentLevel = null;
      } else {
        if (mgViewSettings.fromPlId === -1) {
          mgViewSettings.fromPlId = id;
        } else if (mgViewSettings.fromPlId === id) {
          mgViewSettings.fromPlId = -1;
        } else {
          mgViewSettings.fromPlId = id;
        }
      }
      mgView.update();
    };

    Controller.prototype.actionClick = function(act, value) {
      if (mgViewSettings.isAttack) {
        if (act === 'solve') {
          mgViewSettings.isAttack = false;
          mgViewSettings.currentLevel = null;
          mgView.update();
          return;
        } else {
          return;
        }
      }
      mgViewSettings.isAttack = false;
      switch (act) {
        case 'solve':
          mgViewSettings.isAttack = true;
          mgViewSettings.currentLevel = mgModel.players[mgViewSettings.fromPlId].getLevel();
          break;
        case 'unsolve':
          mgModel.miss(mgViewSettings.fromPlId);
          mgViewSettings.fromPlId = -1;
          break;
        case 'treat':
          mgModel.treat(mgViewSettings.fromPlId, value);
          mgViewSettings.fromPlId = -1;
          break;
        case 'penalty':
          mgModel.penalty(mgViewSettings.fromPlId);
          mgViewSettings.fromPlId = -1;
      }
      mgView.update();
    };

    Controller.prototype.newGame = function() {
      snapshotter.removeSnapshots();
      mgView.update();
      return this.bindPlayersClick();
    };

    return Controller;

  })();

  window.mgController = new Controller();

}).call(this);

//# sourceMappingURL=controller.js.map
