// Generated by CoffeeScript 1.8.0
(function() {
  var Model, Player, levels, penalties, __savesVer__, __settingsVer__;

  __settingsVer__ = 0;

  __savesVer__ = 0;

  levels = {
    square: [0.6, 1],
    hospital: [0.3, 0.6],
    resuscitation: [0, 0.3],
    morgue: [-10000, 0]
  };

  penalties = [
    {
      "treat": 0,
      "attack": 0
    }, {
      "treat": 0.01,
      "attack": 3
    }, {
      "treat": 0.03,
      "attack": 6
    }, {
      "treat": 0.05,
      "attack": 9
    }, {
      "treat": 0.1,
      "attack": 12
    }
  ];

  Player = (function() {
    function Player(_at_id, _at_name, _at_settings, _at_statistic) {
      this.id = _at_id;
      this.name = _at_name;
      this.settings = _at_settings;
      this.statistic = _at_statistic;
      this.health = 1;
      this.solved = this.unsolved = this.treatment = penalties = 0;
    }

    Player.prototype.setHealth = function(health) {
      return this.health = getValScope(health([0, 1]));
    };

    Player.prototype.incTreatment = function() {
      if ((this.settings.get(nullResus)) && (this.getLevel === "resuscitation")) {
        return this.treatment = 0;
      } else {
        return this.treatment += 1;
      }
    };

    Player.prototype.getHealth = function() {
      return this.health;
    };

    Player.prototype.getLevel = function() {
      var level, scope, _ref;
      for (level in levels) {
        scope = levels[level];
        if ((scope[0] < (_ref = this.health) && _ref <= scope[1])) {
          return level;
        }
      }
      return void 0;
    };

    Player.prototype._rawAttack = function() {
      var penalty;
      penalty = penalties[pl.penalties].attack;
      return 10 + this.solved - this.unsolved - penalty - 3 * this.treatment;
    };

    Player.prototype.getAttackWithoutTreat = function() {
      return (getValScope(this._rawAttack + 3 * this.treatment, [0, this.settings.get(maxAttack)])) / 100;
    };

    Player.prototype.getAttack = function() {
      return (getValScope(this._rawAttack, [0, this.settings.get(maxAttack)])) / 100;
    };

    Player.prototype.getAttackTo = function(player) {
      switch (false) {
        case 0 !== this.health:
          return 0;
        case this.getLevel === player.getLevel:
          return 0;
        case !((this.id === player.id) && (this.getlevel === "resuscitation") && !this.settings.selfDestroyResuscitation):
          return 0;
        case !((this.id === player.id) && !this.settings.selfDestroyAttack):
          return 0;
        default:
          return this.getAttack;
      }
    };

    Player.prototype._rawTreat = function(solved) {
      return 5 * solved + this.solved - this.unsolved - 3 * this.treatment - 5;
    };

    Player.prototype.getTreat = function(solved) {
      var h;
      h = _rawTreat(solved);
      h += ("hospital" === this.getLevel) * (this.settings.get(hospitalPlus10)) * 10;
      return h = getValScope(h, [(this.settings.selfDestroyTreat ? -Infinity : 0), 1 - this.health]);
    };

    Player.prototype.treat = function(solved) {
      var inc;
      inc = getTreat(solved);
      this.setHealth(this.health + inc);
      return this.incTreatment();
    };

    Player.prototype.hit = function(player) {
      var dmg;
      dmg = this.getAttackTo(player);
      player.setHealth(player.health - dmg);
      return this.solved += 1;
    };

    Player.prototype.miss = function() {
      return this.unsolved += 1;
    };

    Player.prototype.penalty = function() {
      return this.penalty = getValScope(this.penalties += 1, [0, penalties.lenght - 1]);
    };

    return Player;

  })();

  Model = (function() {
    function Model() {
      this.isDay = false;
      this.isGame = false;
      this.time = 0;
      this.timer = void 0;
      this.players = [];
      this.initSettings();
      this.initSaves();
      this.snapshots = [];
      this.snapshotPoint = -1;
      this.stats = {
        "all_damage": {
          "title": "Урона нанесено: ",
          "value": 0
        },
        "all_tasks": {
          "title": "Сыгранные задачи: ",
          "value": 0
        },
        "all_treat": {
          "title": "Вылеченно здоровья: ",
          "value": 0
        },
        "solve_percent": {
          "title": "Решённые/все задачи: ",
          "value": 0
        }
      };
      this.view = void 0;
      this.addSnapshot();
      void 0;
    }

    Model.prototype.initSaves = function() {
      this.saves = JSON.parse(localStorage.getItem('saves'));
      if (this.saves && (this.saves.version !== __savesVer__)) {
        this.saves = null;
      }
      if (this.saves === null) {
        this.saves = {
          version: __savesVer__,
          ids: {}
        };
        return localStorage.setItem('saves', JSON.stringify(this.saves));
      }
    };

    Model.prototype.newSave = function() {
      var id;
      id = 1853;
      while (id in this.saves.ids) {
        id = Math.floor(Math.random() * 100000000000000000);
      }
      return this.writeSave(id);
    };

    Model.prototype.writeSave = function(id) {
      var now;
      now = new Date;
      this.saves.ids[id] = "" + now;
      localStorage.setItem("saves", JSON.stringify(this.saves));
      localStorage.setItem("save" + id, JSON.stringify({
        "players": this.players,
        "stats": this.stats
      }));
      return this.view.updateSaves();
    };

    Model.prototype.deleteSave = function(id) {
      delete this.saves.ids[id];
      localStorage.setItem("saves", JSON.stringify(this.saves));
      localStorage.setItem("save" + id, "");
      return this.view.updateSaves();
    };

    Model.prototype.loadSave = function(id) {
      var i, save, _i, _players, _ref;
      save = JSON.parse(localStorage.getItem("save" + id));
      _players = save.players;
      this.stats = save.stats;
      if ((!this.isGame) || (!this.isDay)) {
        this.changeDayNight();
      }
      this.players = [];
      for (i = _i = 0, _ref = _players.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.addPlayer("");
      }
      this.players = _players;
      return this.view.updateUI();
    };

    Model.prototype.initSettings = function() {
      this.settings = JSON.parse(localStorage.getItem('settings'));
      if (this.settings && (this.settings.version !== __settingsVer__)) {
        this.settings = null;
      }
      if (this.settings === null) {
        this.settings = {
          version: __settingsVer__,
          stTime: 15,
          maxAttack: 20,
          selfDestroyAttack: true,
          selfDestroyTreat: true,
          selfDestroyResuscitation: false,
          hospitalPlus10: true,
          nullResus: true
        };
        localStorage.setItem('settings', JSON.stringify(this.settings));
      }
      this.settingsDesc = {
        info: {
          type: "text",
          before: "Помните: настройки обновляются <b>сразу</b>!"
        },
        wiki: {
          type: "text",
          before: "<a href='https://github.com/ktulhy-kun/math_gunplay/wiki'>Как играть</a>"
        },
        stTime: {
          type: "number",
          before: "Продолжительность дня",
          after: "мин",
          def: "20",
          help: "Если вы меняете это поле днём, то изменения вступят в силу только на <b>следующий</b> день"
        },
        maxAttack: {
          type: "number",
          before: "Максимальная атака",
          after: "%",
          def: "15"
        },
        selfDestroyAttack: {
          type: "checkbox",
          after: "Самоубийство (Атака)"
        },
        selfDestroyTreat: {
          type: "checkbox",
          after: "Самоубийство (Лечение)"
        },
        selfDestroyResuscitation: {
          type: "checkbox",
          after: "Самоубийство (Реанимация)"
        },
        hospitalPlus10: {
          type: "checkbox",
          after: "Дополнительные +10 при лечении в госпитале"
        },
        nullResus: {
          type: "checkbox",
          after: "Обнуление количества лечений при лечении в реанимации"
        },
        attackFormula: {
          type: "text",
          before: "Формула расчёта урона:<br>min (10 + Р - Н - 3 * Л, МАКСУРОН)",
          help: "Р -- кол-во решённых задач<br> Н -- кол-во нерешённых задач<br> Л -- кол-во попыток лечения<br> МАКСУРОН -- максимальный урон, см. выше"
        },
        treatFormula: {
          type: "text",
          before: "Формула расчёта лечения:<br>5 * У + Р - Н - 3 * Л - 5",
          help: "У -- кол-во решённых задач из 3-х, остальное см. выше"
        },
        github: {
          type: "text",
          before: "<a href='https://github.com/ktulhy-kun/math_gunplay'>Исходный код</a>"
        }
      };
      return void 0;
    };

    Model.prototype.setSettings = function(name, val) {
      this.settings[name] = val;
      localStorage.setItem('settings', JSON.stringify(this.settings));
      return void 0;
    };

    Model.prototype.joinView = function(_at_view) {
      this.view = _at_view;
    };

    Model.prototype.forwardSnapshot = function() {
      this.snapshotPoint += 1;
      this.loadSnapshot(this.snapshotPoint);
      return void 0;
    };

    Model.prototype.loadSnapshot = function(snapshotN) {
      var players, stats, _ref;
      if (snapshotN == null) {
        snapshotN = this.snapshotPoint - 1;
      }
      this.snapshotPoint = snapshotN;
      _ref = this.snapshots[this.snapshotPoint], this.isGame = _ref.isGame, this.isDay = _ref.isDay, players = _ref.players, stats = _ref.stats;
      this.players = deepCopy(players);
      this.stats = deepCopy(stats);
      this.view.updateUI();
      return void 0;
    };

    Model.prototype.addSnapshot = function() {
      this.snapshots = this.snapshots.slice(0, this.snapshotPoint + 1);
      this.snapshots = this.snapshots.concat({
        'isGame': this.isGame,
        'isDay': this.isDay,
        'players': deepCopy(this.players),
        'stats': deepCopy(this.stats)
      });
      this.snapshotPoint += 1;
      if (this.view) {
        this.view.snapshotButtons();
      }
      return void 0;
    };

    Model.prototype.clearSnapshots = function() {
      this.snapshotPoint = -1;
      this.snapshots = [];
      this.addSnapshot();
      return void 0;
    };

    Model.prototype.setDayTimer = function() {
      this.time = this.settings.stTime * 60;
      this.view.updateTime();
      this.timer = setInterval((function(_this) {
        return function() {
          _this.time -= 1;
          if (_this.time <= 0) {
            _this.changeDayNight();
          } else {
            _this.view.updateTime();
          }
          return void 0;
        };
      })(this), 1000);
      return void 0;
    };

    Model.prototype.changeDayNight = function() {
      clearInterval(this.timer);
      if (!this.isGame) {
        this.isGame = true;
        this.isDay = true;
      } else {
        this.isDay = !this.isDay;
      }
      if (this.isDay) {
        this.setDayTimer();
      }
      this.clearSnapshots();
      this.view.updateUI();
      return void 0;
    };

    Model.prototype.addPlayer = function(name) {
      this.players.push({
        name: name,
        id: this.players.length,
        health: 1,
        solve: 0,
        unsolve: 0,
        treatment: 0,
        penalties: 0
      });
      this.view.updateUI();
      return void 0;
    };

    Model.prototype.changeName = function(plN, newname) {
      this.players[plN].name = newname;
      this.view.updateUI();
      return void 0;
    };

    return Model;

  })();

  window.Model = Model;

}).call(this);

//# sourceMappingURL=model.js.map
