// Generated by CoffeeScript 1.8.0
(function() {
  var JSONify, Statistic, getValScope, observer,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  observer = Tools.observer;

  getValScope = Tools.getValScope;

  JSONify = Tools.JSONify;

  Statistic = (function(_super) {
    __extends(Statistic, _super);

    function Statistic(_at__players) {
      this._players = _at__players;
      this._statsText = {
        "all_damage": "Урона нанесено: ",
        "all_tasks": "Сыгранные задачи: ",
        "all_treat": "Вылеченно здоровья: ",
        "solve_percent": "Решённые/все задачи: "
      };
      this.stats = {
        "all_damage": 0,
        "all_tasks": 0,
        "all_treat": 0,
        "solve_percent": 0
      };
      this.solved = 0;
      this.unsolved = 0;
      this.className = "Statistic";
      this.JSONProperties = ["stats", "solved", "unsolved"];
      this.register(Statistic);
    }

    Statistic.prototype.binds = function() {
      return this._bind_damage();
    };

    Statistic.prototype._solved_update = function() {
      this.stats.all_tasks = this.solved + this.unsolved;
      return this.stats.solve_percent = this.solved / (this.solved + this.unsolved);
    };

    Statistic.prototype._bind_damage = function() {
      var id, player, _ref, _results;
      _ref = this._players;
      _results = [];
      for (id in _ref) {
        player = _ref[id];
        if ("length" !== id) {
          player.setWatcher("health", (function(_this) {
            return function(type, oldValue, newValue) {
              var dmg, treat;
              dmg = getValScope(oldValue - newValue, [0, +Infinity]);
              _this.stats.all_damage += dmg;
              treat = getValScope(newValue - oldValue, [0, +Infinity]);
              return _this.stats.all_treat += treat;
            };
          })(this));
          player.setWatcher("solved", (function(_this) {
            return function(t, o, n) {
              _this.solved += n - o;
              return _this._solved_update();
            };
          })(this));
          _results.push(player.setWatcher("unsolved", (function(_this) {
            return function(t, o, n) {
              _this.unsolved += n - o;
              return _this._solved_update();
            };
          })(this)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Statistic;

  })(JSONify);

  window.Model.Statistic = Statistic;

}).call(this);

//# sourceMappingURL=statistics.js.map
