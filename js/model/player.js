// Generated by CoffeeScript 1.8.0
(function() {
  var Player, getValScope, levels, observer, penalties_list;

  getValScope = Tools.getValScope;

  observer = Tools.observer;

  levels = {
    square: [0.6, 1],
    hospital: [0.3, 0.6],
    resuscitation: [0, 0.3],
    morgue: [-10000, 0]
  };

  penalties_list = [
    {
      "treat": 0,
      "attack": 0
    }, {
      "treat": 0.01,
      "attack": 3
    }, {
      "treat": 0.03,
      "attack": 6
    }, {
      "treat": 0.05,
      "attack": 9
    }, {
      "treat": 0.1,
      "attack": 12
    }
  ];

  Player = (function() {
    function Player(_at_id, _at_name, _at_settings) {
      this.id = _at_id;
      this.name = _at_name;
      this.settings = _at_settings;
      this.setHealth(1);
      this.solved = this.unsolved = this.treatment = this.penalties = 0;
    }

    Player.prototype.setHealth = function(health) {
      return this.health = getValScope(health, [0, 1]);
    };

    Player.prototype.getHealth = function() {
      return this.health;
    };

    Player.prototype.incTreatment = function() {
      if ((this.settings.nullTreatIfTreatResuscitation()) && (this.getLevel() === "resuscitation")) {
        return this.treatment = 0;
      } else {
        return this.treatment += 1;
      }
    };

    Player.prototype.getLevel = function() {
      var level, scope, _ref;
      for (level in levels) {
        scope = levels[level];
        if ((scope[0] < (_ref = this.getHealth()) && _ref <= scope[1])) {
          return level;
        }
      }
      return void 0;
    };

    Player.prototype._rawAttack = function() {
      var penalty;
      penalty = penalties_list[this.penalties].attack;
      return 10 + this.solved - this.unsolved - penalty - 3 * this.treatment;
    };

    Player.prototype._rawTreat = function(solved) {
      return 5 * solved + this.solved - this.unsolved - 3 * this.treatment - 5;
    };

    Player.prototype.getAttackWithoutTreat = function() {
      return (getValScope(this._rawAttack() + 3 * this.treatment, [0, this.settings.maxAttack()])) / 100;
    };

    Player.prototype.getAttack = function() {
      return (getValScope(this._rawAttack(), [0, this.settings.maxAttack()])) / 100;
    };

    Player.prototype.getAttackTo = function(player) {
      switch (false) {
        case 0 !== this.getHealth():
          return 0;
        case this.getLevel() === player.getLevel():
          return 0;
        case !((this.id === player.id) && (this.getLevel() === "resuscitation") && !this.settings.selfDestroyResuscitation()):
          return 0;
        case !((this.id === player.id) && !this.settings.selfDestroyAttack()):
          return 0;
        default:
          return this.getAttack();
      }
    };

    Player.prototype.getTreat = function(solved) {
      var h;
      h = this._rawTreat(solved);
      h += ("hospital" === this.getLevel()) * (this.settings.hospitalPlus10()) * 10;
      return h = getValScope(h, [(this.settings.selfDestroyTreat() ? -Infinity : 0), 1 - this.getHealth()]);
    };

    Player.prototype.treat = function(solved) {
      var inc;
      inc = this.getTreat(solved);
      this.setHealth(this.getHealth() + inc);
      return this.incTreatment();
    };

    Player.prototype.hit = function(player) {
      var dmg;
      dmg = this.getAttackTo(player);
      player.setHealth(player.getHealth() - dmg);
      return this.solved += 1;
    };

    Player.prototype.miss = function() {
      return this.unsolved += 1;
    };

    Player.prototype.penalty = function() {
      return this.penalty = getValScope(this.penalties += 1, [0, penalties_list.lenght() - 1]);
    };

    Player.prototype.toString = function() {
      return "Player#" + this.id + "â™¥" + (this.getHealth()) + "/" + this.solved + ":" + this.unsolved;
    };

    Player.prototype.setWatcher = function(property, callback) {
      var prop, _i, _len, _ref, _results;
      if ("_all" === property) {
        _ref = ["solved", "unsolved", "penalties", "treatment"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          prop = _ref[_i];
          _results.push(this.setWatcher(prop, callback));
        }
        return _results;
      } else {
        return observer.observe(this, property, callback);
      }
    };

    return Player;

  })();

  window.Model.Player = Player;

}).call(this);

//# sourceMappingURL=player.js.map
